#!/usr/bin/env groovy

pipeline {
    agent any

    environment {
      ANSIBLE_SERVER = inventory_aws_ec2.yaml
    }

    stages {
      stage('provision server') {
          environment {
              AWS_ACCESS_KEY_ID = credentials('jenkins_aws_access_key_id')
              AWS_SECRET_ACCESS_KEY = credentials('jenkins_aws_secret_access_key')
              TF_VAR_env_prefix = 'twbs'
          }
          steps {
              script {
                  dir('../terraform') {
                      sh "terraform init"
                      sh "terraform apply --auto-approve"
                      EC2_PUBLIC_IP = sh(
                          script: "terraform output ec2_public_ip",
                          returnStdout: true
                      ).trim()
                    }
                }
            }
        }

      stage("copy files to ansible server") {
          steps {
              script {
                  echo "copying all neccessary files to ansible control node"
                  sshagent(['server-key']) {
                      sh "scp -o StrictHostKeyChecking=no ansible/* ec2-user@${ANSIBLE_SERVER}:/home"

                      withCredentials([sshUserPrivateKey(credentialsId: 'ec2-server-key', keyFileVariable: 'keyfile', usernameVariable: 'user')]) {
                          sh 'scp $keyfile ec2-user@$ANSIBLE_SERVER:/home/ssh-key.pem'
                        }
                    }
                }
            }
        }

      stage("execute ansible playbook") {
          steps {
              script {
                  echo "calling ansible playbook to configure ec2 instances"
                  def remote = [:]
                  remote.name = "ansible-server"
                  remote.host = ANSIBLE_SERVER
                  remote.allowAnyHosts = true

                  withCredentials([sshUserPrivateKey(credentialsId: 'ansible-server-key', keyFileVariable: 'keyfile', usernameVariable: 'user')]){
                      remote.user = user
                      remote.identityFile = keyfile
                      sshScript remote: remote, script: "ansible-server.sh"
                      sshCommand remote: remote, command: "ansible-playbook deploy-twbs.yaml"
                    }
                }
            }
        }

    }
}
